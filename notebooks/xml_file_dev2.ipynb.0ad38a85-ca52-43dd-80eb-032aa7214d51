{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.insert(0, \"/home/pwahle/proliferating_RGC/\")\n",
    "\n",
    "import yaml\n",
    "import importlib\n",
    "import modules\n",
    "importlib.reload(modules)\n",
    "import os\n",
    "from pathlib import Path\n",
    "import subprocess\n",
    "\n",
    "# load global variables and parameters\n",
    "with open(\"../params.yml\", 'r') as ymlfile:\n",
    "    cfg = yaml.load(ymlfile, Loader=yaml.FullLoader)\n",
    "\n",
    "globals().update(cfg)\n",
    "\n",
    "from scipy import ndimage\n",
    "import re\n",
    "import cv2\n",
    "from scipy import ndimage as ndi\n",
    "import copy\n",
    "import numpy as np\n",
    "import matplotlib as mpl\n",
    "import os\n",
    "from pathlib import Path\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from skimage import io"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def affine_matrix_from_points(v0, v1, shear=True, scale=True, usesvd=True):\n",
    "\n",
    "    v0 = np.array(v0, dtype=np.float64, copy=True)\n",
    "    v1 = np.array(v1, dtype=np.float64, copy=True)\n",
    "\n",
    "    ndims = v0.shape[0]\n",
    "    if ndims < 2 or v0.shape[1] < ndims or v0.shape != v1.shape:\n",
    "        raise ValueError(\"input arrays are of wrong shape or type\")\n",
    "\n",
    "    # move centroids to origin\n",
    "    t0 = -np.mean(v0, axis=1)\n",
    "    M0 = np.identity(ndims+1)\n",
    "    M0[:ndims, ndims] = t0\n",
    "    v0 += t0.reshape(ndims, 1)\n",
    "    t1 = -np.mean(v1, axis=1)\n",
    "    M1 = np.identity(ndims+1)\n",
    "    M1[:ndims, ndims] = t1\n",
    "    v1 += t1.reshape(ndims, 1)\n",
    "\n",
    "    if shear:\n",
    "        # Affine transformation\n",
    "        A = np.concatenate((v0, v1), axis=0)\n",
    "        u, s, vh = np.linalg.svd(A.T)\n",
    "        vh = vh[:ndims].T\n",
    "        B = vh[:ndims]\n",
    "        C = vh[ndims:2*ndims]\n",
    "        t = np.dot(C, np.linalg.pinv(B))\n",
    "        t = np.concatenate((t, np.zeros((ndims, 1))), axis=1)\n",
    "        M = np.vstack((t, ((0.0,)*ndims) + (1.0,)))\n",
    "    elif usesvd or ndims != 3:\n",
    "        # Rigid transformation via SVD of covariance matrix\n",
    "        u, s, vh = np.linalg.svd(np.dot(v1, v0.T))\n",
    "        # rotation matrix from SVD orthonormal bases\n",
    "        R = np.dot(u, vh)\n",
    "        if np.linalg.det(R) < 0.0:\n",
    "            # R does not constitute right handed system\n",
    "            R -= np.outer(u[:, ndims-1], vh[ndims-1, :]*2.0)\n",
    "            s[-1] *= -1.0\n",
    "        # homogeneous transformation matrix\n",
    "        M = np.identity(ndims+1)\n",
    "        M[:ndims, :ndims] = R\n",
    "    else:\n",
    "        # Rigid transformation matrix via quaternion\n",
    "        # compute symmetric matrix N\n",
    "        xx, yy, zz = np.sum(v0 * v1, axis=1)\n",
    "        xy, yz, zx = np.sum(v0 * np.roll(v1, -1, axis=0), axis=1)\n",
    "        xz, yx, zy = np.sum(v0 * np.roll(v1, -2, axis=0), axis=1)\n",
    "        N = [[xx+yy+zz, 0.0,      0.0,      0.0],\n",
    "             [yz-zy,    xx-yy-zz, 0.0,      0.0],\n",
    "             [zx-xz,    xy+yx,    yy-xx-zz, 0.0],\n",
    "             [xy-yx,    zx+xz,    yz+zy,    zz-xx-yy]]\n",
    "        # quaternion: eigenvector corresponding to most positive eigenvalue\n",
    "        w, V = np.linalg.eigh(N)\n",
    "        q = V[:, np.argmax(w)]\n",
    "        q /= vector_norm(q)  # unit quaternion\n",
    "        # homogeneous transformation matrix\n",
    "        M = quaternion_matrix(q)\n",
    "\n",
    "    if scale and not shear:\n",
    "        # Affine transformation; scale is ratio of RMS deviations from centroid\n",
    "        v0 *= v0\n",
    "        v1 *= v1\n",
    "        M[:ndims, :ndims] *= math.sqrt(np.sum(v1) / np.sum(v0))\n",
    "\n",
    "    # move centroids back\n",
    "    M = np.dot(np.linalg.inv(M1), np.dot(M, M0))\n",
    "    M /= M[ndims, ndims]\n",
    "    return M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = data_path + 'exp4/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "with open(path + 'multipoints.xml', 'rb') as f:\n",
    "    data = f.read()\n",
    "Bs_orig = BeautifulSoup(data, \"xml\")\n",
    "\n",
    "with open(path + 'multipoints_after.xml', 'rb') as f:\n",
    "    data = f.read()\n",
    "Bs_new = BeautifulSoup(data, \"xml\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "a1 = np.array([float(Bs_orig.find_all('dXPosition', {'runtype':'double'})[0]['value']),float(Bs_orig.find_all('dYPosition', {'runtype':'double'})[0]['value']),float(Bs_orig.find_all('dZPosition', {'runtype':'double'})[0]['value'])])\n",
    "a2 = np.array([float(Bs_orig.find_all('dXPosition', {'runtype':'double'})[1]['value']),float(Bs_orig.find_all('dYPosition', {'runtype':'double'})[1]['value']),float(Bs_orig.find_all('dZPosition', {'runtype':'double'})[1]['value'])])\n",
    "a3 = np.array([float(Bs_orig.find_all('dXPosition', {'runtype':'double'})[2]['value']),float(Bs_orig.find_all('dYPosition', {'runtype':'double'})[2]['value']),float(Bs_orig.find_all('dZPosition', {'runtype':'double'})[2]['value'])])\n",
    "v0 = np.array([a1,a2,a3])\n",
    "\n",
    "b1 = np.array([float(Bs_new.find_all('dXPosition', {'runtype':'double'})[0]['value']),float(Bs_new.find_all('dYPosition', {'runtype':'double'})[0]['value']),float(Bs_new.find_all('dZPosition', {'runtype':'double'})[0]['value'])])\n",
    "b2 = np.array([float(Bs_new.find_all('dXPosition', {'runtype':'double'})[1]['value']),float(Bs_new.find_all('dYPosition', {'runtype':'double'})[1]['value']),float(Bs_new.find_all('dZPosition', {'runtype':'double'})[1]['value'])])\n",
    "b3 = np.array([float(Bs_new.find_all('dXPosition', {'runtype':'double'})[2]['value']),float(Bs_new.find_all('dYPosition', {'runtype':'double'})[2]['value']),float(Bs_new.find_all('dZPosition', {'runtype':'double'})[2]['value'])])\n",
    "v1 = np.array([b1,b2,b3])\n",
    "\n",
    "T = affine_matrix_from_points(v0, v1,shear=False, scale=False, usesvd=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "bX = []\n",
    "for i in Bs_orig.find_all('dXPosition', {'runtype':'double'})[3:]:\n",
    "    bX.append(float(i['value']))\n",
    "bY = []\n",
    "for i in Bs_orig.find_all('dYPosition', {'runtype':'double'})[3:]:\n",
    "    bY.append(float(i['value']))\n",
    "bZ = []\n",
    "for i in Bs_orig.find_all('dZPosition', {'runtype':'double'})[3:]:\n",
    "    bZ.append(float(i['value']))\n",
    "v3 = np.squeeze(np.dstack([bX,bY,bZ,np.ones(len(bZ))]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  14502.05507909,    8523.07105585,    5132.05429556,\n",
       "        1398728.1117423 ],\n",
       "       [  14917.49882524,    8126.42569922,    5144.78571115,\n",
       "        1324081.50995982],\n",
       "       [  14117.40074447,    8560.50928247,    5130.79650126,\n",
       "        1405422.58243605],\n",
       "       [  13670.96714768,    8670.14187035,    5122.40704737,\n",
       "        1425921.99886132],\n",
       "       [  14428.92651952,    8604.50982852,    5133.62899608,\n",
       "        1413889.28125668],\n",
       "       [  26366.08470734,    4272.46388881,    5235.75412181,\n",
       "         607760.93904763],\n",
       "       [  26319.20341771,    4624.35881381,    5224.92820186,\n",
       "         674295.12505666],\n",
       "       [  26295.85159869,    4994.18763654,    5224.9231795 ,\n",
       "         743764.36242533],\n",
       "       [  26248.62188076,    5091.8633916 ,    5220.88656962,\n",
       "         762241.03789982],\n",
       "       [  37997.10067987,    -921.2013911 ,    5368.49633729,\n",
       "        -361882.38169121],\n",
       "       [  38009.51392456,    -787.31891747,    5365.3432101 ,\n",
       "        -336578.67783451],\n",
       "       [  38043.19474849,    -135.89606859,    5352.5202248 ,\n",
       "        -213594.34354669],\n",
       "       [  37972.11330162,     278.0083605 ,    5343.52389278,\n",
       "        -135510.58478842]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.set_printoptions(suppress=True)\n",
    "projected_points = np.matmul(v3,T)\n",
    "projected_points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "for tag in np.arange(len(Bs_orig.find_all('dXPosition', {'runtype':'double'})))[3:]:\n",
    "    Bs_orig.find_all('dXPosition', {'runtype':'double'})[tag]['value'] = str(projected_points[tag-3,0])\n",
    "    \n",
    "for tag in np.arange(len(Bs_orig.find_all('dXPosition', {'runtype':'double'})))[:3]:\n",
    "    Bs_orig.find_all('dXPosition', {'runtype':'double'})[tag]['value'] = str(v1[tag,0])\n",
    "    \n",
    "for tag in np.arange(len(Bs_orig.find_all('dYPosition', {'runtype':'double'})))[3:]:\n",
    "    Bs_orig.find_all('dYPosition', {'runtype':'double'})[tag]['value'] = str(projected_points[tag-3,1])\n",
    "    \n",
    "for tag in np.arange(len(Bs_orig.find_all('dYPosition', {'runtype':'double'})))[:3]:\n",
    "    Bs_orig.find_all('dYPosition', {'runtype':'double'})[tag]['value'] = str(v1[tag,1])\n",
    "    \n",
    "for tag in np.arange(len(Bs_orig.find_all('dZPosition', {'runtype':'double'})))[3:]:\n",
    "    Bs_orig.find_all('dZPosition', {'runtype':'double'})[tag]['value'] = str(projected_points[tag-3,2])\n",
    "    \n",
    "for tag in np.arange(len(Bs_orig.find_all('dZPosition', {'runtype':'double'})))[:3]:\n",
    "    Bs_orig.find_all('dZPosition', {'runtype':'double'})[tag]['value'] = str(v1[tag,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(path + \"test.xml\", \"w\") as f:\n",
    "    f.write(Bs_orig.prettify())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
